---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="view-transition" content="same-origin">
	</head>
	<body>
		<div id="content">
			<slot />
		</div>
	</body>
</html>
<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
</style>

<script>

	if(document.startViewTransition) {		
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url);
	
			// if it is an external link, open it in a new tab
			if (toUrl.origin !== window.location.origin) {
				window.open(event.destination.url, '_blank');
				event.preventDefault();
			} 
	
			event.intercept({
				async handler() {
					// fetch the new page
					const response = await fetch(toUrl.pathname);
					const html = await response.text();
	
					// regex to get the body content
					const body = html.match(/<body[^>]*>([\s\S]*)<\/body>/i)[1];
	
					// update the page title
					const title = html.match(/<title[^>]*>([\s\S]*)<\/title>/i)[1];
					document.title = title;
					
					// update the page content
					document.startViewTransition(() => {
	
						document.getElementById('content').innerHTML = body;
						// scroll to the top
						document.documentElement.scrollTop = 0;
	
					})
				}
			})
		});
	}

</script>
